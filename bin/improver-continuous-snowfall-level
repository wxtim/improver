#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# (C) British Crown Copyright 2017 Met Office.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
"""Script to apply thresholding to a cube."""

import argparse
import iris

from improver.psychometric_calculations import FallingSnowLevel


def main():
    """Load in arguments and get going."""
    parser = argparse.ArgumentParser(
        description="Calculate the continuous falling snow level ")
    parser.add_argument("temperature", metavar="TEMPERATURE",
                        help="File path to a cube of air temperatures at the "
                        "the points for for which the continuous falling"
                        " snow level is being calculated.")
    parser.add_argument("relative_humidity", metavar="RELATIVE_HUMIDITY",
                        help="File path to a cube of relative humidities at "
                        "the points for for which the continuous falling"
                        " snow level is being calculated.")
    parser.add_argument("pressure", metavar="PRESSURE",
                        help="File path to a cube of air pressures at the "
                        "points for for which the continuous falling snow "
                        "level is being calculated.")
    parser.add_argument("orography", metavar="OROGRAPHY",
                        help="A path to an input NetCDF file containing "
                        "a cube with the orography in m of the terrain "
                        "that the continuous falling snow level is being"
                        "calculated.")
    parser.add_argument("output_filepath", metavar="OUTPUT_FILE",
                        help="The output path for the processed NetCDF")
    parser.add_argument("--precison", metavar="NEWTON_PRECISION",
                        default=None, type=float,
                        help="Precision to which the wet bulb temperature "
                        "is required: This is used by the Newton iteration "
                        "default value is 0.0005")
    parser.add_argument("--falling_level_threshold",
                        metavar="FALLING_LEVEL_THRESHOLD",
                        default=None, type=float,
                        help="Cutoff threshold for the wet-bulb integral used "
                        "to calculate the falling snow level.  "
                        "Default Value is 90.0")

    args = parser.parse_args()

    options = {}
    if args.precision:
        options['precision'] = args.precision
    if args.falling_level_threshold:
        options['falling_level_threshold'] = args.falling_level_threshold

    input_cubes = {'temperature': args.temperature,
                   'relative_humidity': args.relative_humidity,
                   'pressure': args.pressure,
                   'orog': args.orography}

    result = FallingSnowLevel(**options).process(**input_cubes)

    iris.save(result, args.output_filepath)


if __name__ == "__main__":
    main()
